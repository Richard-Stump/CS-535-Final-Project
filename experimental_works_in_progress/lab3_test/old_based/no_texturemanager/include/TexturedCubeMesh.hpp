#pragma once

#include <kernel.h>
#include <stdio.h>
#include <tamtypes.h>
#include <sifrpc.h>
#include <debug.h>
#include <unistd.h>
#include <gif_tags.h>

#include <gs_gp.h>
#include <gs_psm.h>

#include <dma.h>
#include <dma_tags.h>
#include <packet2.h>
#include <packet2_utils.h>

#include <draw.h>
#include <graph.h>
#include <packet.h>
#include <malloc.h>
// #include "../../../globals/assets/cube_mesh_data.c"
// VECTOR* c_verts __attribute__((aligned(128))); VECTOR* c_sts __attribute__((aligned(128)));
#include "TexturedShape.hpp"
#include "Mesh.hpp"

class TexturedCubeMesh: public TexturedShape
{
public:
    TexturedCubeMesh();
    TexturedCubeMesh(float, float, float, float);
    ~TexturedCubeMesh();

    int face_count = 36, vert_count = 24;

    int faces[36] = {
    0, 1, 2,
    1, 2, 3,
    4, 5, 6,
    5, 6, 7,
    8, 9, 10,
    9, 10, 11,
    12, 13, 14,
    13, 14, 15,
    16, 17, 18,
    17, 18, 19,
    20, 21, 22,
    21, 22, 23};

    VECTOR vertices[24] = {
    {10.00f, 10.00f, 10.00f, 1.00f},
    {10.00f, 10.00f, -10.00f, 1.00f},
    {10.00f, -10.00f, 10.00f, 1.00f},
    {10.00f, -10.00f, -10.00f, 1.00f},
    {-10.00f, 10.00f, 10.00f, 1.00f},
    {-10.00f, 10.00f, -10.00f, 1.00f},
    {-10.00f, -10.00f, 10.00f, 1.00f},
    {-10.00f, -10.00f, -10.00f, 1.00f},
    {-10.00f, 10.00f, 10.00f, 1.00f},
    {10.00f, 10.00f, 10.00f, 1.00f},
    {-10.00f, 10.00f, -10.00f, 1.00f},
    {10.00f, 10.00f, -10.00f, 1.00f},
    {-10.00f, -10.00f, 10.00f, 1.00f},
    {10.00f, -10.00f, 10.00f, 1.00f},
    {-10.00f, -10.00f, -10.00f, 1.00f},
    {10.00f, -10.00f, -10.00f, 1.00f},
    {-10.00f, 10.00f, 10.00f, 1.00f},
    {10.00f, 10.00f, 10.00f, 1.00f},
    {-10.00f, -10.00f, 10.00f, 1.00f},
    {10.00f, -10.00f, 10.00f, 1.00f},
    {-10.00f, 10.00f, -10.00f, 1.00f},
    {10.00f, 10.00f, -10.00f, 1.00f},
    {-10.00f, -10.00f, -10.00f, 1.00f},
    {10.00f, -10.00f, -10.00f, 1.00f}};
    // int faces_count = 240;

// int faces[240] = {
// 1,14,13,
// 2,14,16,
// 1,13,18,
// 1,18,20,
// 1,20,17,
// 2,16,23,
// 3,15,25,
// 4,19,27,
// 5,21,29,
// 6,22,31,
// 2,23,26,
// 3,25,28,
// 4,27,30,
// 5,29,32,
// 6,31,24,
// 7,33,38,
// 8,34,40,
// 9,35,41,
// 10,36,42,
// 11,37,39,
// 13,15,3,
// 13,14,15,
// 14,2,15,
// 16,17,6,
// 16,14,17,
// 14,1,17,
// 18,19,4,
// 18,13,19,
// 13,3,19,
// 20,21,5,
// 20,18,21,
// 18,4,21,
// 17,22,6,
// 17,20,22,
// 20,5,22,
// 23,24,11,
// 23,16,24,
// 16,6,24,
// 25,26,7,
// 25,15,26,
// 15,2,26,
// 27,28,8,
// 27,19,28,
// 19,3,28,
// 29,30,9,
// 29,21,30,
// 21,4,30,
// 31,32,10,
// 31,22,32,
// 22,5,32,
// 26,33,7,
// 26,23,33,
// 23,11,33,
// 28,34,8,
// 28,25,34,
// 25,7,34,
// 30,35,9,
// 30,27,35,
// 27,8,35,
// 32,36,10,
// 32,29,36,
// 29,9,36,
// 24,37,11,
// 24,31,37,
// 31,10,37,
// 38,39,12,
// 38,33,39,
// 33,11,39,
// 40,38,12,
// 40,34,38,
// 34,7,38,
// 41,40,12,
// 41,35,40,
// 35,8,40,
// 42,41,12,
// 42,36,41,
// 36,9,41,
// 39,42,12,
// 39,37,42,
// 37,10,42
// };




// int vertex_count = 42;
// VECTOR vertices[42] =
// {
// {0.000000,-1.000000,0.000000, 1.00f},
// {0.723607,-0.447220,0.525725, 1.00f},
// {-0.276388,-0.447220,0.850649, 1.00f},
// {-0.894426,-0.447216,0.000000, 1.00f},
// {-0.276388,-0.447220,-0.850649, 1.00f},
// {0.723607,-0.447220,-0.525725, 1.00f},
// {0.276388,0.447220,0.850649, 1.00f},
// {-0.723607,0.447220,0.525725, 1.00f},
// {-0.723607,0.447220,-0.525725, 1.00f},
// {0.276388,0.447220,-0.850649, 1.00f},
// {0.894426,0.447216,0.000000, 1.00f},
// {0.000000,1.000000,0.000000, 1.00f},
// {-0.162456,-0.850654,0.499995, 1.00f},
// {0.425323,-0.850654,0.309011, 1.00f},
// {0.262869,-0.525738,0.809012, 1.00f},
// {0.850648,-0.525736,0.000000, 1.00f},
// {0.425323,-0.850654,-0.309011, 1.00f},
// {-0.525730,-0.850652,0.000000, 1.00f},
// {-0.688189,-0.525736,0.499997, 1.00f},
// {-0.162456,-0.850654,-0.499995, 1.00f},
// {-0.688189,-0.525736,-0.499997, 1.00f},
// {0.262869,-0.525738,-0.809012, 1.00f},
// {0.951058,0.000000,0.309013, 1.00f},
// {0.951058,0.000000,-0.309013, 1.00f},
// {0.000000,0.000000,1.000000, 1.00f},
// {0.587786,0.000000,0.809017, 1.00f},
// {-0.951058,0.000000,0.309013, 1.00f},
// {-0.587786,0.000000,0.809017, 1.00f},
// {-0.587786,0.000000,-0.809017, 1.00f},
// {-0.951058,0.000000,-0.309013, 1.00f},
// {0.587786,0.000000,-0.809017, 1.00f},
// {0.000000,0.000000,-1.000000, 1.00f},
// {0.688189,0.525736,0.499997, 1.00f},
// {-0.262869,0.525738,0.809012, 1.00f},
// {-0.850648,0.525736,0.000000, 1.00f},
// {-0.262869,0.525738,-0.809012, 1.00f},
// {0.688189,0.525736,-0.499997, 1.00f},
// {0.162456,0.850654,0.499995, 1.00f},
// {0.525730,0.850652,0.000000, 1.00f},
// {-0.425323,0.850654,0.309011, 1.00f},
// {-0.425323,0.850654,-0.309011, 1.00f},
// {0.162456,0.850654,-0.499995, 1.00f}};

//     VECTOR sts[42] = {
//     {0.00f, 1.00f, 1.00f, 0.00f},
//     {1.00f, 1.00f, 1.00f, 0.00f},
//     {0.00f, 0.00f, 1.00f, 0.00f},
//     {1.00f, 0.00f, 1.00f, 0.00f},
//     {0.00f, 1.00f, 1.00f, 0.00f},
//     {1.00f, 1.00f, 1.00f, 0.00f},
//     {0.00f, 0.00f, 1.00f, 0.00f},
//     {1.00f, 0.00f, 1.00f, 0.00f},
//     {0.00f, 1.00f, 1.00f, 0.00f},
//     {1.00f, 1.00f, 1.00f, 0.00f},
//     {0.00f, 0.00f, 1.00f, 0.00f},
//     {1.00f, 0.00f, 1.00f, 0.00f},
//     {0.00f, 1.00f, 1.00f, 0.00f},
//     {0.00f, 1.00f, 1.00f, 0.00f},
//     {1.00f, 1.00f, 1.00f, 0.00f},
//     {0.00f, 0.00f, 1.00f, 0.00f},
//     {1.00f, 0.00f, 1.00f, 0.00f},
//     {0.00f, 1.00f, 1.00f, 0.00f},
//     {1.00f, 1.00f, 1.00f, 0.00f},
//     {0.00f, 0.00f, 1.00f, 0.00f},
//     {1.00f, 0.00f, 1.00f, 0.00f},
//     {0.00f, 1.00f, 1.00f, 0.00f},
//     {1.00f, 1.00f, 1.00f, 0.00f},
//     {0.00f, 0.00f, 1.00f, 0.00f},
//     {1.00f, 0.00f, 1.00f, 0.00f},
//     {0.00f, 1.00f, 1.00f, 0.00f},
//     {1.00f, 1.00f, 1.00f, 0.00f},
//     {0.00f, 0.00f, 1.00f, 0.00f},
//     {1.00f, 0.00f, 1.00f, 0.00f},
//     {0.00f, 1.00f, 1.00f, 0.00f},
//     {1.00f, 1.00f, 1.00f, 0.00f},
//     {0.00f, 0.00f, 1.00f, 0.00f},
//     {1.00f, 0.00f, 1.00f, 0.00f},
//     {0.00f, 1.00f, 1.00f, 0.00f},
//     {1.00f, 1.00f, 1.00f, 0.00f},
//     {0.00f, 0.00f, 1.00f, 0.00f},
//     {1.00f, 0.00f, 1.00f, 0.00f},
//     {1.00f, 0.00f, 1.00f, 0.00f},
//     {0.00f, 1.00f, 1.00f, 0.00f},
//     {1.00f, 1.00f, 1.00f, 0.00f},
//     {0.00f, 0.00f, 1.00f, 0.00f},
//     {1.00f, 0.00f, 1.00f, 0.00f}};

    void calculate();
    void build();
};

